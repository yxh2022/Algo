https://leetcode.com/problems/top-k-frequent-elements/

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int n : nums){
            map.put(n,map.getOrDefault(n,0)+1);
            // if (!map.containsKey(n)){
            //     map.put(n,0);
            // }
            // map.put(n,map.get(n)+1);
        }
        //Queue<Integer> q = new PriorityQueue<>(Collections.reverseOrder());//max heap
        Queue<Integer> q = new PriorityQueue<>((n1, n2) -> map.get(n1) -map.get(n2));//default is min heap
        for (int key : map.keySet()){
            q.add(key);
            if (q.size()>k){
                q.poll();
            }
        }
        int[] top  = new int[k];
        for (int i= 0; i<k; i++){
            top[i] = q.poll();
        }
        return top; 
    }
}
