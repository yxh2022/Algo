class Solution {
    public int findKthLargest(int[] nums, int k) {
        return  quickselect(nums, 0, nums.length-1, nums.length-k);
    
    }
    public int[] swap(int[]nums, int a, int b){
        int tmp = nums[a];
        nums[a] = nums[b];
        nums[b] =tmp;
        return nums;
    }
    public int partition(int[]nums, int a, int b){
        int pivot = nums[b]; // choose the last element as pivot
        int left = a;
        int right = b-1;
        while (left<=right){
            if (nums[left]<=pivot){
                left++;
            }
            else if(nums[right]>pivot){
                right--;
            }
            else{
                swap(nums, left, right);
                left++;
                right--;
            }
        }
        swap(nums, left,b);//put the pivot to the right position
        return left;
    }
    
    public int quickselect(int[] nums, int left, int right, int k){
        if (left == right){
            return nums[left];
        }
        int pivot_idx = partition(nums, left, right);
        if (pivot_idx ==k){
            return nums[pivot_idx];
        }
        else if (pivot_idx >k){
            return quickselect(nums, left, pivot_idx-1, k);
        }
        else //(pivot_idx <k)
        {
           return quickselect(nums, pivot_idx+1, right, k);
        }
    }
}










// class Solution {
//     public int findKthLargest(int[] nums, int k) {
//     PriorityQueue<Integer> heap =new PriorityQueue<Integer>();
//     //new PriorityQueue<Integer>()(Collections.reverseOrder()); priorityqueue是默认min heap,reverse 变成max heap;
//     for (int n: nums){
//         heap.add(n);
//         int tmp = heap.peek();
//         if (heap.size()>k){
//             heap.poll(); //min heap把最小的poll出去；
//         }
        
//     }
//     return heap.poll();
//     }
// }
