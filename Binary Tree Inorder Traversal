/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        LinkedList<TreeNode> stack = new LinkedList<TreeNode>();
        List<Integer> res = new ArrayList<Integer>();
        
        if (root == null){
            return res;
        }
        
        TreeNode cur = root;
        while (cur != null || !stack.isEmpty()){
            while (cur != null){ //两个while模拟DFS
                stack.add(cur);
                cur = cur.left;
            }
            cur = stack.pollLast();
            res.add(cur.val);
            cur = cur.right;
        }
        return res;
        
        // List<Integer> res = new ArrayList<Integer>();
        // res = inorder(root, res);
        // return res;
    }
    // public List<Integer> inorder(TreeNode root, List<Integer> res){
    //     if (root == null){
    //         return res;
    //     }
    //     inorder(root.left, res);
    //     res.add(root.val);
    //     inorder(root.right, res);
    //     return res;
    // }
}
