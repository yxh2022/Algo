Given a target integer T and an integer array A, A is sorted in ascending order first, then shifted by an arbitrary number of positions.
For Example, A = {3, 4, 5, 1, 2} (shifted left by 2 positions). Find the index i such that A[i] == T or return -1 if there is no such index.
Assumptions: There are no duplicate elements in the array.

public class Solution {
  public int search(int[] array, int target) {
    // Write your solution here
    if (array == null || array.length == 0){
      return -1;
    }
    int pivot = findPivot(array);
    if (pivot == -1){
      return binarySearch(array, 0, array.length-1, target);
    }
    else{
      if (target>=array[0]){
        return binarySearch(array, 0, pivot-1, target);
      }
      else{
        return binarySearch(array, pivot, array.length-1, target);
      }
    }
    
  }
  public int findPivot(int[] array){ // return the index of the smallest element
    int left= 0;
    int right = array.length-1;
    int mid = 0;
    if (array[right]>=array[0]){ // check if the array is not rotated or arraylength == 1
      return -1;
    }
    while (left<right-1){
      mid = (left+right)/2;
      if (array[mid]>=array[0]){ //mid is located in the first part and target is in the second part
        left = mid;
      }
      if (array[mid]<array[0]){ //mid is located in the second part
        right = mid;
      }
    }
    return right;
  }
  public int binarySearch(int[] array, int start, int end, int target){
    int left= start;
    int right = end;
    int mid = 0;
    while (left<right-1){
      mid = (left+right)/2;
      if (array[mid]==target){ //mid is located in the first part and target is in the second part
        return mid;
      }
      else if (array[mid]>target) { //mid is located in the second part
        right = mid;
      }
      else {
        left = mid;
      }
    }
    if (array[left]== target){
      return left;
    }
    else if (array[right]== target){
      return right;
    }
    else return -1;
  }
}
