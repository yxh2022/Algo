https://leetcode.com/problems/check-completeness-of-a-binary-tree/

//if one node is missing a child, then any nodes behind this node could be expanded.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        if (root == null){
            return false;
        }
        LinkedList<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        boolean isMissing = false;
        while (!q.isEmpty()){
            TreeNode tmp = q.remove();
            if (isMissing == true && (tmp.left !=null || tmp.right!=null)){
                return false;
            }
            if (tmp.left == null && tmp.right != null){
                    return false;
                }
            if (tmp.left ==null || tmp.right==null){
                isMissing = true;
            }
            if (tmp.left !=null){
                q.add(tmp.left);
            }
            if (tmp.right !=null){
                q.add(tmp.right);
            }
        }
        return true;
    } 
}
