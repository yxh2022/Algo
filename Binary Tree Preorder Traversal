/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        LinkedList output = new LinkedList();
        if (root  == null){
            return output;
        }
        LinkedList<TreeNode> stack = new LinkedList();
        stack.add(root);
        while (!stack.isEmpty()){
            TreeNode tmp = stack.pollLast();
            output.add(tmp.val);
            if (tmp.right != null){
                stack.add(tmp.right);
            }
            if (tmp.left != null){
                stack.add(tmp.left);
            } 
        }
        return output;
        
        
        
        
        
      // recursive way
        
//         List<Integer> rlt =  new ArrayList<Integer>();
//         rlt = preorder(root, rlt);
//         return rlt;
//         }
    
//     public List<Integer> preorder(TreeNode root, List<Integer> rlt) {
//         if (root == null){
//             return rlt;
//         }
//         rlt.add(root.val);
//         preorder(root.left, rlt);
//         preorder(root.right, rlt);
//         return rlt;
//     }
    }
}
   
