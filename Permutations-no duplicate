https://leetcode.com/problems/permutations/

//swap,省空间
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        LinkedList<List<Integer>> res = new LinkedList();
        LinkedList<Integer> input = new LinkedList();
        for (int i:nums){
            input.add(i);
        }
        helper(input, res, 0);
        return res;
        
    }
    public void helper(LinkedList<Integer> nums, LinkedList<List<Integer>> res, int level) {
        if (level==nums.size()){
            res.add(new LinkedList(nums));
            return;
        }
        for (int i = level; i<nums.size(); i++){
            Collections.swap(nums, i, level);
            helper(nums, res, level+1);
            Collections.swap(nums, i, level);
            }
        }
}


// class Solution {
//     public List<List<Integer>> permute(int[] nums) {
//         List<List<Integer>> res = new LinkedList();
//         LinkedList<Integer> perm = new LinkedList();
//         boolean[] used = new boolean[nums.length];
//         Arrays.fill(used,false);
//         helper(nums, used, perm, res);
//         return res;
        
//     }
//     public void helper(int[] nums, boolean[] used, LinkedList<Integer> perm, List<List<Integer>> res) {
//         if (perm.size()==nums.length){
//             res.add(new LinkedList(perm));
//             return;
//         }
//         for (int i = 0; i<nums.length; i++){
//             if (used[i] == false){
//                 perm.push(nums[i]);
//                 used[i] = true;
//                 helper(nums, used, perm, res);
//                 used[i] = false;
//                 perm.pop();
//             }
//         }
//     }
// }
