https://app.laicode.io/app/problem/633

/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  public ListNode insertCircularList(ListNode head, int newVal) {
    // write your solution here
    ListNode newNode = new ListNode(newVal);
    if (head == null || head.value <= newVal){
      newNode.next = head;
      return newNode;
    }
    ListNode cur = head;
    int max = Integer.MIN_VALUE;
    ListNode tail = head;
    //while (cur.next!= null && cur.next.value < newVal){//有可能找不到cur.next.value < newVal，因为
    // newVal可能是最小或最大，可以找prenode>newVal>next or prenode<newVal<next or 最大最小值处；
    while (cur.next != head){
      if (cur.value >= newVal && newVal >= cur.next.value || 
          cur.value<= newVal && newVal <= cur.next.value
       ) {
        break;
      }
      if (cur.value>max){
        max = cur.value;
        tail = cur;
      }
      cur = cur.next;
    }
    if (newVal > max || newVal< tail.next.value){
      newNode.next = tail.next;
      tail.next = newNode;
    }
    else{
      newNode.next = cur.next;
      cur.next = newNode;
    }return newNode;
  }
}
