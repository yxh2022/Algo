/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode();
        ListNode head1 =  list1;
        ListNode head2 =  list2;
        ListNode cur =  dummy;
        if (list1 == null){
            return list2;
        }
        if (list2 == null){
            return list1;
        }
        while (head1 != null && head2 != null){
            if (head1.val >= head2.val){
                cur.next = head2;              
                head2 = head2.next;
            }
            else{
                cur.next = head1;
                head1 = head1.next;
                
            }
            cur = cur.next;
        }
        if (head1 != null){
            cur.next = head1;
        }
       if (head2 != null){
            cur.next = head2;
        }
        return dummy.next;
    }
}


/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  public ListNode merge(ListNode one, ListNode two) {
    // Write your solution here
    if (one == null && two == null){
      return null;
    }
    ListNode dummyNode = new ListNode(0);
    ListNode cur = dummyNode;
    ListNode cur1 = one;
    ListNode cur2 = two;
    while (cur1 != null & cur2 != null){
      if (cur1.value<=cur2.value){
        cur.next = cur1;
        cur1 = cur1.next;
      }
      else{
        cur.next = cur2;
        cur2 = cur2.next;
      }  
      cur = cur.next;
      }
    while (cur1 != null){ //不需要while
      cur.next = cur1;
      cur1 = cur1.next;
      cur = cur.next;
    }
    while (cur2 != null){
      cur.next = cur2;
      cur2 = cur2.next;
      cur = cur.next;
    }
    return dummyNode.next;
  }
}
